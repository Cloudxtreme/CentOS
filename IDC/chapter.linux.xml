<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.linux.xml 458 2012-08-29 09:36:27Z netkiller $ -->
<chapter id="linux">
	<title>OS 安装与初始化</title>
	<subtitle>快速初始化Linux服务器</subtitle>
	<section>
		<title>服务器快速安装与部署</title>
		<section id="kickstart">
			<title>Kickstart</title>
			<para>使用 Kickstart 实现无人值守安装，制作一个Linux 安装光盘或ISO文件将ks文件放置到根目录。这样光盘放入光驱后无需人为干预，实现自动安装。</para>
			<para>另外还可以采用无盘启动网络安装</para>
			<para>anaconda-ks.cfg</para>
			<screen>
# Kickstart file automatically generated by anaconda.

#version=RHEL6
install
cdrom
lang en_US.UTF-8
keyboard us
network --device eth0 --bootproto static --ip 172.16.3.81 --netmask 255.255.255.0 --gateway 172.16.3.254 --nameserver 8.8.8.8 --hostname www.example.com
rootpw  --iscrypted $6$Ze/iw9HmY5LVYHhN$Hil8L/e8r2EwzmpacjW7VnZu1Jx6V9ZE55oAAWNr52qnh82ZL9m9J340mSRQXB5fYI2/ahL09xSlZ2WbdeTe3.
firewall --service=ssh
authconfig --enableshadow --passalgo=sha512 --enablefingerprint
selinux --enforcing
timezone --utc Asia/Harbin
bootloader --location=mbr --driveorder=sda,sdb --append="crashkernel=auto rhgb quiet"
# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
#clearpart --none --drives=sda

#part / --fstype=ext4 --grow --size=200
#part swap --size=64000

#part /www --fstype=ext4 --grow --size=200



repo --name="CentOS"  --baseurl=file:///mnt/source --cost=100

%packages
@core
@server-policy
%end
			</screen>
		</section>
		<section>
			<title>快速初始化</title>
			<para>后面章节中提供很多脚本，直接复制下面命令，右键粘贴到终端中运用即可。</para>
			<para>例如每个服务器都需要安装ntp,您只需要服务下面代码，粘贴到终端即可，它能实现自动安装，修改配置文件与启动服务等等</para>
			<screen>
			<![CDATA[
yum install ntp -y
vim /etc/ntp.conf <<VIM > /dev/null 2>&1
:17,17s/^/server 172.16.1.10\r/
:wq
VIM
service ntpd start
chkconfig ntpd on
			]]>
			</screen>
			<para>你也可以吧这些脚本组合，制作一个你自己的脚本，然后批量执行。例如：</para>
			<screen>
			<![CDATA[
$ cat install.sh
#!/bin/bash

if [ ! -f /usr/bin/vim ] ; then
        alias vim='vi'
fi

if [ -z "$( egrep "CentOS|Redhat" /etc/issue)" ]; then
        echo 'Only for Redhat or CentOS'
        exit
fi

echo -ne "
search example.com
nameserver 172.16.3.51
nameserver 172.16.3.52
nameserver 208.67.222.222
nameserver 202.67.220.220
nameserver 8.8.8.8
nameserver 4.4.4.4
" > /etc/resolv.conf

echo -ne "

* soft nofile 65536
* hard nofile 65536
" >>/etc/security/limits.conf

cat >> /etc/sysctl.conf <<EOF

net.ipv4.ip_local_port_range = 1024 65500
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_fin_timeout = 60
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 4096
EOF

yum update -y
rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt
rpm -K http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm
rpm -i http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm

# redhat 5.6 cp /etc/ntp.conf.original /etc/ntp.conf
yum install ntp -y
vi /etc/ntp.conf <<VIM > /dev/null 2>&1
:22,24s/^/#/
:25,25s/^/\rserver 172.16.3.51\rserver 172.16.3.52\r/
:wq
VIM
service ntpd start
chkconfig ntpd on

yum install net-snmp -y
vi /etc/snmp/snmpd.conf <<VIM > /dev/null 2>&1
:62,62s/systemview/all/
:85,85s/^#//
:wq
VIM
service snmpd start
chkconfig snmpd on

yum install -y nrpe nagios-plugins
vi /etc/nagios/nrpe.cfg <<VIM > /dev/null 2>&1
:%s/allowed_hosts=127.0.0.1/allowed_hosts=172.16.1.2/
:wq
VIM

cat >> /etc/nagios/nrpe.cfg <<EOF

#command[check_http]=/usr/lib64/nagios/plugins/check_http -I 127.0.0.1 -p 80 -u http://www.example.com/index.html
command[check_swap]=/usr/lib64/nagios/plugins/check_swap -w 20% -c 10%
command[check_all_disks]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -e
EOF

chkconfig nrpe on
service nrpe start

cat >> /etc/bashrc <<EOF

export HISTTIMEFORMAT="%Y-%m-%d-%H:%M:%S "
EOF
			]]>
			</screen>
			<para>将上面脚本放到web server 上，然后使用rsh循环批量执行的</para>
			<command>curl -s http://172.16.0.20/shell/install.sh | bash</command>
		</section>
		<section>
			<title>JDK and Tomcat</title>
			<screen>
			<![CDATA[
#!/bin/bash
rsync -auzv root@172.16.3.23:/srv/* /srv/
ln -s /srv/java /usr/local/java
ln -s /srv/apache-tomcat /usr/local/
mkdir -p /www/logs/tomcat
echo -ne '
export JAVA_HOME=/srv/java
export CATALINA_HOME=/srv/apache-tomcat
export CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CATALINA_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$CATALINA_HOME/bin:
export JAVA_OPTS="-server -Xms512m -Xmx8192m  -XX:PermSize=64M -XX:MaxPermSize=512m"
' >> /etc/profile
			]]>
			</screen>
		</section>
		<section>
			<title>批量安装</title>
			<para>检查日期</para>
			<screen>
			<![CDATA[
for ip in {23..32} {49,50} {81..92}; do ssh root@172.16.0.$ip date; done
			]]>
			</screen>
			<para>时间更新</para>
			<screen>
			<![CDATA[
for ip in {23..32} {49,50} {81..92}; do ssh root@172.16.0.$ip ntpdate 172.16.0.1; done
			]]>
			</screen>
			<para>安装NFS Server</para>
			<screen>
			<![CDATA[
for ip in {21..32} {41,50} {81..92}; do rsh root@172.16.0.$ip "yum install -y nfs-utils"; done

for host in {21..32} {41,50} {81..92}; do echo 172.16.0.$host && rsh root@172.16.0.$host "exportfs"; done

for ip in {21..32} {41,50} {81..92}; do rsync -auz ~/config/nfs/exports root@172.16.0.$ip:/etc/; rsh root@172.16.0.$ip "service nfs reload"; done
			]]>
			</screen>
		</section>
	</section>
<!--
	<section id="linux.kernel">
		<title>Kernel</title>
		<section>
			<title>RPS / RFS</title>
		</section>
	</section>
-->
	<section id="linux.ip">
		<title>IP / Mac Address</title>
		<section>
			<title>IP Address</title>
			<screen>
nmap -sP 172.16.1.0/24
			</screen>
		</section>
		<section>
			<title>Mac Address</title>
			<screen>
nmap -sP -PI -PT -oN ipandmaclist.txt 172.16.1.0/24
			</screen>
		</section>
		<section>
			<title>NIC</title>
			<screen>
DEVICE=eth0
BOOTPROTO=static
HWADDR=00:15:17:3E:90:90
ONBOOT=yes
NETMASK=255.255.255.0
IPADDR=172.16.1.26
GATEWAY=172.16.1.1
TYPE=Ethernet
USERCTL=no
IPV6INIT=no
PEERDNS=yes
			</screen>
		</section>
		<section>
			<title>DNS</title>
			<screen>
			<![CDATA[
echo -ne "
search example.com
nameserver 208.67.222.222
nameserver 202.67.220.220
nameserver 8.8.8.8
nameserver 4.4.4.4
" > /etc/resolv.conf
			]]>
			</screen>
		</section>
		<section id="bonding">
			<title>bonding</title>
			<para>http://www.kernel.org/pub/linux/kernel/people/marcelo/linux-2.4/Documentation/networking/bonding.txt</para>
			<para>http://www.linuxfoundation.org/collaborate/workgroups/networking/bonding</para>
			<para>http://blog.webdir.bg/ubuntu-linux-and-cisco-switch-link-aggregation-load-balancing-bonding/</para>
			<screen>
			<![CDATA[
cat >> /etc/modprobe.d/bonding.conf <<EOF
alias bond0 bonding
options bond0 miimon=100 mode=1  primary=eth0
alias bond1 bonding
options bond1 miimon=100 mode=1  primary=eth2
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
ONBOOT=yes
MASTER=bond0
SLAVE=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
DEVICE=eth1
ONBOOT=yes
MASTER=bond0
SLAVE=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth2 <<EOF
DEVICE=eth2
ONBOOT=yes
MASTER=bond1
SLAVE=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth3 <<EOF
DEVICE=eth3
ONBOOT=yes
MASTER=bond1
SLAVE=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-bond0 <<EOF
DEVICE=bond0
ONBOOT=yes
IPADDR=192.168.80.1
NETMASK=255.255.255.0
NETWORK=192.168.80.0
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-bond1 <<EOF
DEVICE=bond1
ONBOOT=yes
IPADDR=192.168.80.2
NETMASK=255.255.255.0
NETWORK=192.168.80.0
BOOTPROTO=none
USERCTL=no
EOF
			]]>
			</screen>
			<screen>
			<![CDATA[
cp /etc/sysconfig/network-scripts/ifcfg-eth0{,.original}

cat >> /etc/modprobe.d/bonding.conf <<EOF
alias bond0 bonding
options bond0 mode=balance-alb miimon=1000
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
EOF

cat > /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
DEVICE=eth1
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth2 <<EOF
DEVICE=eth2
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-eth3 <<EOF
DEVICE=eth3
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
EOF

cat >> /etc/sysconfig/network-scripts/ifcfg-bond0 <<EOF
DEVICE=bond0
ONBOOT=yes
BOOTPROTO=none
TYPE=Ethernet
IPADDR=192.168.80.65
NETMASK=255.255.255.0
NETWORK=192.168.80.0
USERCTL=no
EOF
			]]>
			</screen>
			<!-- http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s2-networkscripts-interfaces-chan.html -->
			<!-- http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/sec-Using_Channel_Bonding.html -->
			<screen>
			<![CDATA[
modprobe bonding mode=balance-alb miimon=1000
ifconfig bond0 up
ifconfig bond0 192.168.80.1 netmask 255.255.255.0 up
ifenslave bond0 eth0
ifenslave bond0 eth1

echo 1000 > /sys/class/net/bond0/bonding/miimon
echo 6 > /sys/class/net/bond0/bonding/mode
echo balance-alb > /sys/class/net/bond0/bonding/mode


BONDING_OPTS="mode=1 miimon=100"

echo balance-rr >/sys/class/net/bond0/bonding/mode
modprobe bonding mode=balance-tlb miimon=1000

ifenslave -d bond0 eth0 eth1
ifenslave bond1 eth2 eth3
			]]>
			</screen>
			<screen>
# ethtool eth0
Settings for eth0:
	Supported ports: [ TP ]
	Supported link modes:   10baseT/Half 10baseT/Full
	                        100baseT/Half 100baseT/Full
	                        1000baseT/Full
	Supports auto-negotiation: Yes
	Advertised link modes:  10baseT/Half 10baseT/Full
	                        100baseT/Half 100baseT/Full
	                        1000baseT/Full
	Advertised pause frame use: No
	Advertised auto-negotiation: Yes
	Speed: 100Mb/s
	Duplex: Full
	Port: Twisted Pair
	PHYAD: 1
	Transceiver: internal
	Auto-negotiation: on
	MDI-X: Unknown
	Supports Wake-on: g
	Wake-on: d
	Link detected: yes

# more /proc/net/bonding/bond0
Ethernet Channel Bonding Driver: v3.5.0 (November 4, 2008)

Bonding Mode: adaptive load balancing
Primary Slave: None
Currently Active Slave: None
MII Status: down
MII Polling Interval (ms): 1000
Up Delay (ms): 0
Down Delay (ms): 0

[root@r610 ~]# ifconfig bond0 up
[root@r610 ~]# ifenslave bond0 eth0 eth2

# more /proc/net/bonding/bond0
Ethernet Channel Bonding Driver: v3.5.0 (November 4, 2008)

Bonding Mode: adaptive load balancing
Primary Slave: None
Currently Active Slave: eth0
MII Status: up
MII Polling Interval (ms): 1000
Up Delay (ms): 0
Down Delay (ms): 0

Slave Interface: eth0
MII Status: up
Link Failure Count: 0
Permanent HW addr: 14:fe:b5:dc:30:ee

Slave Interface: eth1
MII Status: up
Link Failure Count: 0
Permanent HW addr: 14:fe:b5:dc:30:f0

[root@r610 network-scripts]# cat /sys/class/net/bond0/bonding/miimon
1000
[root@r610 network-scripts]# cat /sys/class/net/bonding_masters
bond0
[root@r610 network-scripts]# cat /sys/class/net/bond0/bonding/mode
balance-alb 6

	        </screen>
		</section>
	</section>
	<section id="linux.limits">
		<title>limits.conf</title>
		<para>临时设置</para>
		<screen>
ulimit -HSn 65536
ulimit -HSm 65536
		</screen>
		<screen>
echo "ulimit -SHn 65530" >> /root/.bash_profile
echo "ulimit -SHm 16000000" >> /root/.bash_profile
echo "ulimit -HSn 65536" >>/root/.bash_profile
		</screen>
		<para>使用“*”作用于所有用户，但见这样设置，最好的方式是针对需要的用户个别设置</para>
		<screen>
		<![CDATA[
echo -ne "
* soft nofile 65536
* hard nofile 65536
" >>/etc/security/limits.conf > /dev/null 2>&1
		]]>
		</screen>
		<para>/etc/security/limits.d</para>
		<screen>
		<![CDATA[
cat >> /etc/security/limits.conf <<EOF
root 	soft nofile 10240
root 	hard nofile 65536
nobody 	soft nofile 10240
nobody 	hard nofile 65536
EOF
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
cat >> /etc/security/limits.conf <<EOF
www 	soft nofile 65536
www 	hard nofile 65536
EOF
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
cat >> /etc/security/limits.conf <<EOF
apache 	soft nofile 65536
apache 	hard nofile 65536
EOF
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
cat >> /etc/security/limits.conf <<EOF
nginx 	soft nofile 65536
nginx 	hard nofile 65536
EOF
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
cat >> /etc/security/limits.conf <<EOF
mysql 	soft nofile 65536
mysql 	hard nofile 65536
EOF
		]]>
		</screen>
	</section>
	<section id="linux.sysctl">
		<title>sysctl</title>
		<screen>
		<![CDATA[
cat >> /etc/sysctl.conf <<EOF
net.ipv4.ip_local_port_range = 1024 65500
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_fin_timeout = 60
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 4096
EOF
/sbin/sysctl -p
		]]>
		</screen>
		<!--
  		<screen>
net.core.rmem_max=16777216
net.core.wmem_max=16777216

net.core.netdev_max_backlog = 30000
net.core.somaxconn = 262144

net.ipv4.ip_local_port_range = 4096 65536
net.ipv4.tcp_mem=4096 65536 16777216
net.ipv4.tcp_rmem=4096 87380 16777216
net.ipv4.tcp_wmem=4096 65536 16777216
net.ipv4.tcp_fin_timeout = 30

net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_window_scaling = 0
net.ipv4.tcp_sack = 0
net.ipv4.tcp_no_metrics_save=1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_orphans = 262144
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_keepalive_time = 300

net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.all.arp_announce = 2
  		</screen>
  		-->
	</section>
	<section id="linux.env">
		<title>profile</title>
		<screen>
		<![CDATA[
echo -ne '
export JAVA_HOME=/usr/local/java
export RESIN_HOME=/usr/local/resin
export CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH
export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$HOMR/bin:
export PATH=$PATH:/usr/local/httpd:/usr/local/php:/usr/local/mysql:/usr/local/resin
export JAVA_OPTS="-server -Xms512m -Xmx4096m  -XX:PermSize=64M -XX:MaxPermSize=512m"
' >> /etc/profile
		]]>
		</screen>
	</section>
	<section id="linux.crontab">
		<title>Crontab</title>
		<para>crontab 中输出信息很保存到 /var/spool/clientmqueue 需要定时清除</para>
		<screen>
# du -sh /var/* | sort -rn|head -n 10
# cd /var/spool/clientmqueue
# ls | xargs rm -f
		</screen>
		<para>避免上述情况可以在crontab 中加入 <![CDATA[>/dev/null 2>&1]]></para>
		<screen>
		<![CDATA[
# crontab -l
* */2 * * * /usr/local/apache/bin/apachectl restart >/dev/null 2>&1
		]]>
		</screen>
		<para>crontab 日志	</para>
		<screen>
		<![CDATA[
$ crontab -l
# m h  dom mon dow   command
0 1 * * * /home/mgmt/backup && echo `date` >> /home/mgmt/backup.log
		]]>
		</screen>
	</section>
	<section id="linux.nfs">
		<title>NFS</title>
		<para>Images</para>
		<screen>
/images            172.16.1.0/24(rw,sync,fsid=0,anonuid=99,anongid=99)
/images/2008     *(rw,sync)
/images/2009     *(rw,nohide,sync)
/images/2010	 *(rw,nohide,sync)
		</screen>
		<screen>
chkconfig portmap on
chkconfig nfs on
chkconfig nfslock on
chkconfig rpcidmapd on

service portmap start
service rpcidmapd start
service nfs start
service nfslock start
		</screen>
	</section>
	<section id="linux.sync">
		<title>释放内存</title>
		<screen>
sync
echo 3 > /proc/sys/vm/drop_caches

名称 : sync
使用权限 : 系统管理者
使用方式 : sync
说明 : Linux 系统中欲写入硬盘的资料有的时候会了效率起见，会写到 filesystem buffer 中，这个 buffer 是一块记忆体空间，如果欲写入硬盘的资料存于此 buffer 中，而系统又突然断电的话，那么资料就会流失了，sync 指令会将存于 buffer 中的资料强制写入硬盘中。

To free pagecache: echo 1 > /proc/sys/vm/drop_caches
To free dentries and inodes: echo 2 > /proc/sys/vm/drop_caches
To free pagecache, dentries and inodes: echo 3 > /proc/sys/vm/drop_caches
		</screen>
	</section>


	<section id="tcp.status">
		<title>TCP/IP</title>
		<section>
			<title>TCP 状态</title>
			<command>netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,"\t",state[key]}'</command>
			<screen>
状态：			描述
CLOSED：			无连接是活动的或正在进行
LISTEN：			服务器在等待进入呼叫
SYN_RECV：		一个连接请求已经到达，等待确认
SYN_SENT：		应用已经开始，打开一个连接
ESTABLISHED：	正常数据传输状态
FIN_WAIT1：		应用说它已经完成
FIN_WAIT2：		另一边已同意释放
ITMED_WAIT：		等待所有分组死掉
CLOSING：		两边同时尝试关闭
TIME_WAIT：		另一边已初始化一个释放
LAST_ACK：		等待所有分组死掉
			</screen>
			<para>减少TIME_WAIT状态</para>
			<screen>
net.ipv4.tcp_syncookies = 1 	表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；
net.ipv4.tcp_tw_reuse = 1 		表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；
net.ipv4.tcp_tw_recycle = 1 	表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。
net.ipv4.tcp_fin_timeout = 30	修改系統默认的 TIMEOUT 时间
			</screen>
			<screen>
vim /etc/sysctl.conf
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_fin_timeout = 30
			</screen>
		</section>
		<section>
			<title>TIME_WAIT</title>
			<screen>
# netstat -tna | cut -b 49- |grep TIME_WAIT | sort
			</screen>
		</section>
		<section>
 			<title>SYN_RECV / SYN_SENT</title>
 			<screen>
# netstat -an | grep SYN | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr | more
 			</screen>
		</section>
	</section>

	<section id="linux.status">
		<title>Linux 日常管理</title>
		<orderedlist>
			<title>日常管理的几个要点</title>
			<listitem><para>服务器负载 load average</para></listitem>
			<listitem><para>网络负载</para></listitem>
			<listitem><para>磁盘容量</para></listitem>
			<listitem><para>登录用户</para></listitem>
			<listitem><para>日志分析</para></listitem>
		</orderedlist>
	</section>

</chapter>
